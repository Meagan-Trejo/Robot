package MET;
import robocode.*;
import java.awt.Color;
import robocode.HitRobotEvent;
import robocode.Robot;
import robocode.ScannedRobotEvent;
import robocode.RateControlRobot;
import static robocode.util.Utils.normalRelativeAngleDegrees;
import java.util.*;
import java.util.Map.Entry;

// API help : http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html

/**
 * ModifiedTracker - a robot by (your name here)
 */
public class ModifiedTracker extends RateControlRobot
{
	int count = 0;
	int distCount = 0;
	double gunTurnAmt;
	String trackName;
	
	/**
	 * run: ModifiedTracker's default behavior
	 */
	public void run() {
		// Initialization of the robot should be here

		setColors(Color.red,Color.blue,Color.green); // body,gun,radar
		trackName = null;
		setAdjustGunForRobotTurn(true);
		gunTurnAmt = 10;

		// Robot main loop
		while(true) {
			// Replace the next 4 lines with any behavior you would like
			turnGunRight(gunTurnAmt);
			count++;
			if (count > 2)
			{
				gunTurnAmt = -10;
			}
			if (count > 5)
			{
				gunTurnAmt = 10;
			}
			if (count > 11)
			{
				trackName = null;
			}
		}
	}

	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
		// Replace the next line with any behavior you would like
		if (trackName != null && !e.getName().equals(trackName))
		{
			return;
		}
		
		if (trackName == null)
		{
			trackName = e.getName();
			out.println("Tracking " + trackName); //should only print once, but prints repeatedly
		}
		
		if (e.getDistance() > 150)
		{
			setVelocityRate(e.getVelocity() + 7);
			gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getRadarHeading()));
			setTurnGunRight(gunTurnAmt);
			++distCount;
			if (distCount == 5)
			{
				fire(5);
			}
			fire(1); //misses often
			turnRight(e.getBearing());
			ahead(e.getDistance() - 50);
		}
		else
		{
			gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + getHeading() - getRadarHeading());
			turnGunRight(gunTurnAmt);
//			fire(3);
			
			if (e.getDistance() < 100)
			{
				if (e.getEnergy() < 40)
				{
					turnRight(e.getBearing());
					out.println("Gonna RAM " + trackName + "!!!");
					ahead(e.getDistance() + 1);
					if (e.getEnergy() > 10)
					{
						fire(2);
					}
				}	
			
				else if (e.getBearing() > -90 && e.getBearing() <= 90)
				{
					back(40);
					fire(3);
				}
				else
				{
					ahead(40);
					fire(3);
				}
			}
			else
			{
				fire(3);
			}
			scan();
		}
		
	}
	
	public void onHitRobot(HitRobotEvent e)
	{
		if (trackName != null && !trackName.equals(e.getName()))
		{
			out.println("Tracking " + e.getName() + " due to collision");
		}
		
		trackName = e.getName();
		gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + getHeading() - getRadarHeading());
		turnGunRight(gunTurnAmt);
		fire(3);
		back(50);
	}

	/**
	 * onHitByBullet: What to do when you're hit by a bullet
	 */
//	public void onHitByBullet(HitByBulletEvent e) {
		// Replace the next line with any behavior you would like
//		back(10);
//	}
	
	/**
	 * onHitWall: What to do when you hit a wall
	 */
//	public void onHitWall(HitWallEvent e) {
		// Replace the next line with any behavior you would like
//		back(20);
//	}	
}

class BountySystem {
	private HashMap<String, Enemy> targets;

	public BountySystem() {
		targets = new HashMap<String, Enemy>();
	}

	public void update() {
		for (Entry<String, Enemy> entry : targets.entrySet()) {
			Enemy a = entry.getValue();

			double points = 0;
			// Damage potential
			points = a.getEnergy();
			
			// Kill bonus potential
			points += a.getDamageDone() * 0.20;

			a.setPointValue(points);
		}

	}

	public void addTarget(Enemy e) {
		targets.put(e.getName(), e);
	}

	public void updateTarget(String name, double x, double y, double energy) {
		targets.get(name).updatePos(x, y);
		targets.get(name).updateEnergy(energy);
	}

	public Enemy getTarget(String name) {
		return targets.get(name).copy();
	}

}


class Enemy {
	private double x, y;
	private double energy;
	private double damageDone = 0;
	private String name;
	private double pointValue;
	private int gravIndex;

	public Enemy(String name, double x, double y, double energy) {
		this.name = name;
		this.x = x;
		this.y = y;
		this.energy = energy;
	}

	public void setGravityIndex(int index) {
		gravIndex = index;
	}

	public int getGravityIndex() {
		return gravIndex;
	}

	public double getEnergy() {
		return energy;
	}

	public void updateEnergy(double energy) {
		this.energy = energy;
	}

	public void setDamageDone(double damage) {
		damageDone = damage;
	}

	public double getDamageDone() {
		return damageDone;
	}

	public Enemy copy() {
		return new Enemy(name, x, y, energy);
	}

	public String getName() {
		return name;
	}

	public double getPointValue() {
		return pointValue;
	}

	public void setPointValue(double pointValue) {
		this.pointValue = pointValue;
	}

	public void updatePos(double x, double y) {
		this.x = x;
		this.y = y;
	}

	public String toString() {
		String s = "Robot: " + name + " | Energy: " + energy + " | Worth: " + pointValue + " | X: " + x + " , Y: " + y;
		return s;
	}
}
